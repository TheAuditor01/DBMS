Consider following Relation
Account (Acc_no, branch_name,balance)
Branch(branch_name,branch_city,assets)
Customer(cust_name,cust_street,cust_city)
Depositor(cust_name,acc_no)
Loan(loan_no,branch_name,amount)
Borrower(cust_name,loan_no)
Create above tables with appropriate constraints like primary key,
foreign key, not null etc.
1. Find all customers who have both account and loan at bank.
2. Find all customers who have an account or loan or both at bank.
3. Find all customers who have account but no loan at the bank.
4. Find average account balance at ‚ÄòWadia College‚Äô branch.
5. Find no. of depositors at each branch
---

### ‚úÖ 1. **Table Creation with Constraints**

```sql
-- Branch table
CREATE TABLE Branch (
    branch_name VARCHAR(50) PRIMARY KEY,
    branch_city VARCHAR(50) NOT NULL,
    assets DECIMAL(15, 2) NOT NULL
);

-- Account table
CREATE TABLE Account (
    acc_no INT PRIMARY KEY,
    branch_name VARCHAR(50),
    balance DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (branch_name) REFERENCES Branch(branch_name)
);

-- Customer table
CREATE TABLE Customer (
    cust_name VARCHAR(50) PRIMARY KEY,
    cust_street VARCHAR(100) NOT NULL,
    cust_city VARCHAR(50) NOT NULL
);

-- Depositor table (many-to-many between Customer and Account)
CREATE TABLE Depositor (
    cust_name VARCHAR(50),
    acc_no INT,
    PRIMARY KEY (cust_name, acc_no),
    FOREIGN KEY (cust_name) REFERENCES Customer(cust_name),
    FOREIGN KEY (acc_no) REFERENCES Account(acc_no)
);

-- Loan table
CREATE TABLE Loan (
    loan_no INT PRIMARY KEY,
    branch_name VARCHAR(50),
    amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (branch_name) REFERENCES Branch(branch_name)
);

-- Borrower table (many-to-many between Customer and Loan)
CREATE TABLE Borrower (
    cust_name VARCHAR(50),
    loan_no INT,
    PRIMARY KEY (cust_name, loan_no),
    FOREIGN KEY (cust_name) REFERENCES Customer(cust_name),
    FOREIGN KEY (loan_no) REFERENCES Loan(loan_no)
);
```

---

### üìã Sample Data Insertion

```sql
-- Branches
INSERT INTO Branch VALUES ('Wadia College', 'Pune', 1000000);
INSERT INTO Branch VALUES ('Camp', 'Pune', 800000);

-- Accounts
INSERT INTO Account VALUES (101, 'Wadia College', 5000);
INSERT INTO Account VALUES (102, 'Camp', 7000);

-- Customers
INSERT INTO Customer VALUES ('Alice', 'MG Road', 'Pune');
INSERT INTO Customer VALUES ('Bob', 'FC Road', 'Pune');
INSERT INTO Customer VALUES ('Charlie', 'JM Road', 'Pune');

-- Depositors
INSERT INTO Depositor VALUES ('Alice', 101);
INSERT INTO Depositor VALUES ('Bob', 102);

-- Loans
INSERT INTO Loan VALUES (201, 'Wadia College', 20000);
INSERT INTO Loan VALUES (202, 'Camp', 15000);

-- Borrowers
INSERT INTO Borrower VALUES ('Alice', 201);
INSERT INTO Borrower VALUES ('Charlie', 202);
```

---

### üîç Queries

#### 1Ô∏è‚É£ Find all customers who have **both account and loan** at bank.

```sql
SELECT DISTINCT d.cust_name
FROM Depositor d
JOIN Borrower b ON d.cust_name = b.cust_name;
```

#### 2Ô∏è‚É£ Find all customers who have an **account or loan or both**.

```sql
SELECT DISTINCT cust_name FROM Depositor
UNION
SELECT DISTINCT cust_name FROM Borrower;
```

#### 3Ô∏è‚É£ Find all customers who have an **account but no loan**.

```sql
SELECT DISTINCT d.cust_name
FROM Depositor d
WHERE d.cust_name NOT IN (
    SELECT b.cust_name FROM Borrower b
);
```

#### 4Ô∏è‚É£ Find **average account balance** at ‚ÄòWadia College‚Äô branch.

```sql
SELECT AVG(balance) AS avg_balance
FROM Account
WHERE branch_name = 'Wadia College';
```

#### 5Ô∏è‚É£ Find **number of depositors at each branch**.

```sql
SELECT a.branch_name, COUNT(DISTINCT d.cust_name) AS num_depositors
FROM Account a
JOIN Depositor d ON a.acc_no = d.acc_no
GROUP BY a.branch_name;
```

---

